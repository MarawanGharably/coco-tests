image: registry.gitlab.com/obsessvr/ci-scripts/webstore_base_image_1.1.0:latest

variables:
  VERSION: 0.3.0

  FEATURE_ENV: feature
  DEVELOP_ENV: develop
  BETA_ENV: beta
  PROD_ENV: prod

  SERVICE_DOMAIN_DEVELOP: coco.develop.obsessvr.com
  SERVICE_DOMAIN_BETA: coco.beta.obsessvr.com
  SERVICE_DOMAIN_PROD: coco.obsessvr.com

  S3_FB_BUCKET: feature-branch-qa
  COCO_HOSTING_BUCKET: obsess-coco-hosting


stages:
  - build
  - test
  - deploy


.build-template: &build-template
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # build the test-env test image
    - TEST_IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}/${APP_ENV}_test:$CI_COMMIT_SHORT_SHA
    - SERVICE_IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}/${APP_ENV}_service:$CI_COMMIT_SHORT_SHA
#    - docker build
#      -f Dockerfile
#      --build-arg BUILD_STAGE=${APP_ENV}
#      --build-arg DEPLOY_PATH=${DEPLOY_PATH}
#      --build-arg BASE_PATH=${BASE_PATH}
#      -t $TEST_IMAGE_TAG
#      --target build-env .
#    - docker push $TEST_IMAGE_TAG
    # build the deploy feature image
    - docker build
      -f Dockerfile
      --no-cache
      --build-arg SSH_PRIVATE_KEY_GITLAB="$SSH_PRIVATE_KEY_GITLAB"
      --build-arg APP_ENV=${APP_ENV}
      --build-arg BASE_PATH=${BASE_PATH}
      -t $SERVICE_IMAGE_TAG .
    - docker push $SERVICE_IMAGE_TAG


.test-template: &test-template
  stage: test
  script:
    - >
      docker run $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}/${APP_ENV}_test:$CI_COMMIT_SHORT_SHA
      /bin/bash -c
      "
      npm test
      "



.deploy-template: &deploy-template
  stage: deploy
  script:
    - IMAGE_CONTAINER=coco_app_$CI_COMMIT_REF_SLUG_$CI_COMMIT_SHORT_SHA
    - SERVICE_IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}/${APP_ENV}_service:$CI_COMMIT_SHORT_SHA
    - docker create --name $IMAGE_CONTAINER $SERVICE_IMAGE_TAG
    - mkdir /www
    - docker cp $IMAGE_CONTAINER:/www /
    - aws s3 cp --acl public-read --recursive /www $DEPLOY_PATH
    - aws s3 sync --acl public-read --delete /www $DEPLOY_PATH
    - docker rm $IMAGE_CONTAINER


build:feature:
  <<: *build-template
  variables:
    APP_ENV: ${FEATURE_ENV}
    BASE_PATH: /$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
  only:
    - /^feature\/.*$/


#test:feature:
#  <<: *test-template
#  variables:
#    APP_ENV: ${FEATURE_ENV}
#  only:
#    - /^feature\/.*$/
#  needs:
#    - build:feature


deploy:feature:
  <<: *deploy-template
  variables:
    APP_ENV: ${FEATURE_ENV}
    DEPLOY_PATH: s3://$S3_FB_BUCKET/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG
  environment:
    name: $CI_COMMIT_REF_SLUG
    url: https://features.develop.obsessvr.com/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}/index.html
  only:
    - /^feature\/.*$/
  needs:
    - build:feature


build:develop:
  <<: *build-template
  variables:
    APP_ENV: ${DEVELOP_ENV}
  only:
    - develop


#test:develop:
#  <<: *test-template
#  variables:
#    APP_ENV: ${DEVELOP_ENV}
#  only:
#    - develop
#  needs:
#    - build:develop


deploy:develop:
  <<: *deploy-template
  variables:
    APP_ENV: ${DEVELOP_ENV}
    DEPLOY_PATH: s3://$COCO_HOSTING_BUCKET/develop/
  environment:
    name: develop
    url: https://$SERVICE_DOMAIN_DEVELOP/
  only:
    - develop
  needs:
    - build:develop


build:beta:
  <<: *build-template
  variables:
    APP_ENV: ${BETA_ENV}
  only:
    - master


#test:beta:
#  <<: *test-template
#  variables:
#    APP_ENV: ${BETA_ENV}
#  only:
#    - master
#  needs:
#    - build:beta


deploy:beta:
  <<: *deploy-template
  variables:
    APP_ENV: ${BETA_ENV}
    DEPLOY_PATH: s3://$COCO_HOSTING_BUCKET/beta/
  environment:
    name: beta
    url: $SERVICE_DOMAIN_BETA
  only:
    - master
  needs:
    - build:beta
  when: on_success


build:prod:
  <<: *build-template
  variables:
    APP_ENV: ${PROD_ENV}
  only:
    - master


#test:prod:
#  <<: *test-template
#  variables:
#    APP_ENV: ${PROD_ENV}
#  only:
#    - master
#  needs:
#    - build:prod


deploy:prod:
  <<: *deploy-template
  variables:
    APP_ENV: ${PROD_ENV}
    DEPLOY_PATH: s3://$COCO_HOSTING_BUCKET/prod/
  environment:
    name: prod
    url: $SERVICE_DOMAIN_PROD
  only:
    - master
  needs:
    - build:prod
  when: manual
